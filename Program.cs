using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace Example_005
{
    class Program
    {
        static void Main(string[] args)
        {
            // Домашнее задание
            // Требуется написать несколько методов
            //
            // Задание 1.
            // Воспользовавшись решением задания 3 четвертого модуля
            // 1.1. Создать метод, принимающий число и матрицу, возвращающий матрицу умноженную на число
            // 1.2. Создать метод, принимающий две матрицу, возвращающий их сумму
            // 1.3. Создать метод, принимающий две матрицу, возвращающий их произведение
            //
            // Задание 2.
            // 1. Создать метод, принимающий  текст и возвращающий слово, содержащее минимальное количество букв
            // 2.* Создать метод, принимающий  текст и возвращающий слово(слова) с максимальным количеством букв 
            // Примечание: слова в тексте могут быть разделены символами (пробелом, точкой, запятой) 
            // Пример: Текст: "A ББ ВВВ ГГГГ ДДДД  ДД ЕЕ ЖЖ ЗЗЗ"
            // 1. Ответ: А
            // 2. ГГГГ, ДДДД
            //
            // Задание 3. Создать метод, принимающий текст. 
            // Результатом работы метода должен быть новый текст, в котором
            // удалены все кратные рядом стоящие символы, оставив по одному 
            // Пример: ПППОООГГГООООДДДААА >>> ПОГОДА
            // Пример: Ххххоооорррооошшшиий деееннннь >>> хороший день
            // 
            // Задание 4. Написать метод принимающий некоторое количесво чисел, выяснить
            // является заданная последовательность элементами арифметической или геометрической прогрессии
            // 
            // Примечание
            //             http://ru.wikipedia.org/wiki/Арифметическая_прогрессия
            //             http://ru.wikipedia.org/wiki/Геометрическая_прогрессия
            //
            // *Задание 5
            // Вычислить, используя рекурсию, функцию Аккермана:
            // A(2, 5), A(1, 2)
            // A(n, m) = m + 1, если n = 0,
            //         = A(n - 1, 1), если n <> 0, m = 0,
            //         = A(n - 1, A(n, m - 1)), если n> 0, m > 0.
            // 
            // Весь код должен быть откоммментирован

            Console.WriteLine($"{ "Поочередно введите высоту, ширину и действие, которые вы хотите совершить с матрицами.\n",100}" +
                $"{"Недопускаются разные значения высоты и ширины.\n",80}" +
                $"{"Ввод производится цифрами.\n",69}");

            int tempInt = 0; // перменная для проверки неверных значений
            int heightMas = 0; // Переменная ввода количества строк
            int longMas = 0; // Переменная ввода количества столбцов
            int number = 0;
            string[] progressbar = new string[40]; // Массив прогресс бара (никакой смысловой нагрузки не несет, ни к чему не привязан, просто имитирует работу приложения =) )
            progressbar[0] = "["; // Первый элемент прогресс бара
            progressbar[39] = "]"; // последний элемент прогресс бара

            for (int i = 1; i < 38; i++) // Цикл заполнения массива прогрресс бара
            {
                progressbar[i] = "="; // Элементы между первым и последним элементами прогресс бара
            }

            Random r = new Random(); // Генерирование случайных чисел для матриц

            Console.Write("Введите высоту матрицы: ");
            control(heightMas); // Вызов метода корректности ввода для количества строк
            heightMas = tempInt; // Присваивание переменной количества строк введенного значения

            Console.Write("\nВведите ширину матрицы: ");
            control(longMas); // Вызов метода корректности ввода для количества столбцов
            longMas = tempInt; // Присваивание переменной количества столбцов введенного значения

            if (heightMas != longMas) // Условие проверки равности размеров матриц
            {
                Console.WriteLine("Длинна и ширина матриц не совпадают. Нажмите любую клавишу для выхода");
                Console.ReadKey();
                Environment.Exit(0); // Выход из приложения
            }

            void control(int varCheck) // метод проверки корректности ввода
            {
                if (!int.TryParse(Console.ReadLine(), out tempInt)) //Условие вывода ошибки некорректного ввода
                {
                    Console.WriteLine("вы ввели неправильный параметр. Нажмите любую клавишу для выхода");
                    Console.ReadKey();
                    Environment.Exit(0); // Выход из приложения
                }

            }

            Console.Write("\nКакую математическую операци вы желаете совершить (введите +, - или *): ");
            string option = Console.ReadLine(); // Ввод знака для выполнения действия

            void progress() // Метод прогресс бара 
            {
                Console.Write("\nСоздаем матрицы и подсчитываем результат: ");

                for (int i = 0; i < progressbar.Length; i++) // Цикл вывода прогресс быра
                {
                    Console.Write(progressbar[i]); // Вывод элементов прогресс бара
                    Thread.Sleep(20); // Приостановка программы для имитации загрузки
                }
            }

            int[,] mas = new int[longMas, heightMas]; // Создание двумерного массива
            int[,] masTwo = new int[longMas, heightMas]; // Создание временного двумерного массива

            if (option == "+" || option == "-") // Условие при корректно введенном знаке
            {
                progress(); // Вызов метода вывода прогресс бара
                Console.WriteLine();
                Console.WriteLine("\nПервая матрица: \n");
                createMas(mas); // Вызов метода для создания первого массива
                Console.WriteLine("Вторая матрица: \n");
                createMas(masTwo); // Вызов метода для создания второго массива
                calculation(mas, masTwo); // Вызов метода расчета

            }
            else if (option == "*") // Условие для выполнения умножения матрицы на введенное число
            {
                
                Console.Write("\nВведите число на которое хотите умножить матрицу: ");
                control(number); // Вызов метода проверки введенных данных
                number = tempInt; // Присвоение переменной значения проверенных данных

                progress(); // Вызов метода вывода прогресс бара

                Console.WriteLine();
                Console.WriteLine("\nМатрица: \n");
                createMas(mas); // Вызов метода для создания первого массива
                calculation(mas, masTwo); // Вызов метода расчета
            }
            else // Условие при не корректно введенном знаке
            {
                Console.WriteLine("Вы ввели неправильный параметр. Нажмите любую клавишу для выхода");
                Console.ReadKey();
                Environment.Exit(0); // Выход из приложения
            }

            void createMas(int[,] TempMas) // Метод создания массивов
            {
                for (int i = 0; i < longMas; i++) // Цикл заполнения столбцов
                {
                    TempMas[i, 0] = r.Next(1, 10); // Заполнения столбцов

                    for (int j = 0; j < heightMas; j++) // Цикл заполнения строк
                    {
                        TempMas[i, j] = r.Next(1, 10); // Заполнения строк
                        Console.Write(TempMas[i, j] + "| "); // Вывод массива
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();
            }

            void calculation(int[,] tempMas, int[,] tempT) // Метод расчета
            {               
                for (int i = 0; i < mas.GetLength(0); i++) // Цикл заполнения результатов столбцов
                {
                    for (int j = 0; j < mas.GetLength(1); j++) // Цикл заполнения результатов строк
                    {

                        if (option == "+") // Условие для сложения
                        {
                            mas[i, j] = tempMas[i, j] + tempT[i, j]; // Формула сложения массивов                           
                        }

                        else if (option == "-") // Условие для вычитания
                        {
                            mas[i, j] = tempMas[i, j] - tempT[i, j]; // Формула вычитания массивов                           
                        }

                        else if (option == "*")
                        {
                            mas[i, j] = number * tempMas[i, j]; // Формула умножения массива на введенное число     
                        }
                        
                    }

                }
                output(mas); // Вызов метода вывода результата в консоль
            }

            void output(int[,] temp) // Метод вывода результата в консоль
            {
                if (option == "*") // Условие для вывода введенного числа в консоль
                {
                    Console.Write("Число умножения: " + number + "\n"); // Вывод введенного числа в консоль
                }

                Console.WriteLine("\nРезультат: \n");
                Console.ForegroundColor = ConsoleColor.DarkBlue; // Изменение цвета текста

                for (int i = 0; i < mas.GetLength(0); i++) // Цикл вывода строк результата в консоль
                {
                    for (int j = 0; j < mas.GetLength(1); j++) // Цикл вывода столбцов результата в консоль
                    {
                        Console.Write(String.Format("{0,4}", temp[i, j] + "| ")); // Вывод и форматирование результата 
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();
            }

            Console.ForegroundColor = ConsoleColor.DarkRed; // Изменение цвета текста
            Console.WriteLine("Нажмите любую кнопку для выхода.");
            Console.ReadKey();

        }
        
    }
}
